/*
 * GML - Go QML
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Roland Singer <roland.singer[at]desertbit.com>
 * Copyright (c) 2019 Sebastian Borchers <sebastian[at]desertbit.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package build

import "text/template"

var cMainHeaderTmpl = template.Must(template.New("t").Funcs(tmplFuncMap).Parse(cMainHeaderTmplText))

const cMainHeaderTmplText = `// This file is auto-generated by gml.
#ifndef GML_GEN_C_INCLUDE_H
#define GML_GEN_C_INCLUDE_H

{{ range .Packages}}
#include "../{{.PackageName}}.h"
{{- end}}

#endif
`

var cHeaderTmpl = template.Must(template.New("t").Funcs(tmplFuncMap).Parse(cHeaderTmplText))

const cHeaderTmplText = `// This file is auto-generated by gml.
#ifndef GML_GEN_C_{{.PackageName}}_H
#define GML_GEN_C_{{.PackageName}}_H

#include <gml.h>

#ifdef __cplusplus
extern "C" {
#endif

{{/* Struct loop */ -}}
{{range $struct := .Structs -}}
//###
//### {{$struct.Name}}
//###

typedef void* {{$struct.CBaseName}};

{{$struct.CBaseName}} {{$struct.CBaseName}}_new(void* go_ptr);
void {{$struct.CBaseName}}_free({{$struct.CBaseName}});

{{- /* Signals */ -}}
{{- range $signal := $struct.Signals }}
void {{$struct.CBaseName}}_{{$signal.Name}}({{$struct.CBaseName}} _v{{cParams $signal.Params true false}});
{{end}}

{{- /* Slots */ -}}
{{- range $slot := $struct.Slots }}
typedef {{$slot.CRetType}} (*{{$struct.CBaseName}}_{{$slot.Name}}_cb_t)(void* _go_ptr{{cParams $slot.Params true false}});
void {{$struct.CBaseName}}_{{$slot.Name}}_cb_register({{$struct.CBaseName}}_{{$slot.Name}}_cb_t cb);
{{end}}

{{- /* Properties */ -}}
{{- range $prop := $struct.Properties }}
{{if not $prop.Silent -}}
typedef void (*{{$struct.CBaseName}}_{{$prop.Name}}_changed_cb_t)(void* go_ptr);
void {{$struct.CBaseName}}_{{$prop.Name}}_cb_register({{$struct.CBaseName}}_{{$prop.Name}}_changed_cb_t cb);
{{- end}}

{{$prop.CType}} {{$struct.CBaseName}}_{{$prop.Name}}_get({{$struct.CBaseName}} c);
void {{$struct.CBaseName}}_{{$prop.Name}}_set({{$struct.CBaseName}} c, {{$prop.CType}} v);
{{end}}

{{- /* End of struct loop */ -}}
{{- end}}

#ifdef __cplusplus
}
#endif

#endif
`
