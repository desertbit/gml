// Copyright (c) 2020 Roland Singer, Sebastian Borchers
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

package codegen

import (
	"fmt"
	"io/ioutil"
	"strings"
)

const (
	indentSize = 4
	header     = "This file is auto-generated by gml."
)

// The generator type is a convenient wrapper around a strings.Builder to generate
// source code. Use the constructor newGenerator().
type generator struct {
	s           strings.Builder
	indentLevel int
}

func newGenerator() *generator {
	g := &generator{}
	g.reset()
	return g
}

// reset resets the generator to a clean state.
func (g *generator) reset() {
	g.s.Reset()
	g.indentLevel = 0
}

// commit writes the contents of the generator into a file at the specified path.
// It resets on success the generator.
func (g *generator) commit(path string) (err error) {
	err = ioutil.WriteFile(path, []byte(g.s.String()), filePerm)
	if err != nil {
		return
	}

	g.reset()
	return
}

func (g *generator) indent(f func()) {
	g.indentLevel++
	f()
	g.indentLevel--
}

func (g *generator) ln() {
	g.s.WriteString("\n")
}

func (g *generator) writeLn(s string) {
	g.write(s)
	g.ln()
}

func (g *generator) write(s string) {
	g.s.WriteString(strings.Repeat(" ", g.indentLevel*indentSize) + s)
}

func (g *generator) writefLn(format string, a ...interface{}) {
	g.writef(format, a...)
	g.ln()
}

func (g *generator) writef(format string, a ...interface{}) {
	g.s.WriteString(strings.Repeat(" ", g.indentLevel*indentSize) + fmt.Sprintf(format, a...))
}

func (g *generator) writeLines(ls []string) {
	for _, l := range ls {
		g.writeLn(l)
	}
}
